<div class="row">

    <div class="col-md-12">
        <div class="panel panel-primary list-panel" id="list-panel">
            <div class="panel-heading list-panel-heading">
                <h1 class="panel-title list-panel-title">Assets</h1>
            </div>
            <div class="panel-body">
                <table id="assets-data-table" class="table table-striped table-bordered"></table>
            </div>
        </div>

    </div>
</div>
<div class="row">
    <div class="col-sm-6">
        <button type="button" id="addButton"
                class="btn btn-primary"
                onclick="doAdd();">
            <span class="glyphicon glyphicon-save" aria-hidden="true"></span>
            Add Asset
        </button>
    </div>
</div>
<div class="row">
    <div id='myModal' class='modal fade in' data-bind="validationOptions: validationOptions">
        <div class="modal-dialog">
            <div class="modal-content">
                <div id='myModalContent'>
                    <div class="panel-body">
                        <div class="form-group">
                            <label for="FirstName">FirstName</label>
                            <input type="text" id="FirstName" class="form-control" data-bind="value: product.FirstName" />
                        </div>
                        <div class="form-group">
                            <label for="FirstName">LastName</label>
                            <input type="text" id="LastName" class="form-control" data-bind="value: product.LastName" />
                        </div>
                        <div class="form-group">
                            <label for="FirstName">AssetDate</label>
                            <input type="date" id="AssetDate" class="form-control" data-bind="value: product.AssetDate" data-date="" data-date-format="YYYY-MM-DD" />
                        </div>
                        <div class="form-group">
                            <label for="FirstName">AssetNumber</label>
                            <input type="number" id="AssetNumber" class="form-control" data-bind="value: product.AssetNumber" />
                        </div>
                        <div class="form-group">
                            <label for="FirstName">OrgName</label>
                            <input type="text" id="OrgName" class="form-control" data-bind="value: product.OrgName" />
                        </div>
                        <div class="form-group">
                            <label for="FirstName">Position</label>
                            <input type="text" id="Position" class="form-control" data-bind="value: product.Position" />
                        </div>
                        <div class="form-group">
                            <label for="FirstName">EMail</label>
                            <input type="email" id="EMail" class="form-control" data-bind="value: product.EMail" />
                        </div>
                        <button type="button" class="btn btn-primary" data-bind="click: saveAsset, enable: canSave">
                            <span class="glyphicon glyphicon-save" aria-hidden="true"></span>Save
                        </button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <ul id="errors" class="error-message" data-bind="foreach: generalErrors">
                            <li><span data-bind="text: $data"></span></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts
{
    <script type="text/javascript">

        ko.observable.fn.appendError = function (error) {
            var thisError = this.error();
            if (thisError) {
                this.setError(thisError += '. ' + error);
            }
            else {
                this.setError(error)
            };
        };


            var AssetViewModel = function (data) {
                var self = this;

                self.saveAsset = function () {
                    var theUrl = location.origin +"/api/Update";
                    if (self.errors().length == 0) {
                        self.isSaving(true);
                        $.ajax({
                            url: theUrl,
                            type: "POST",
                            data: ko.toJSON(self.product),
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            success: function (data) {
                                self.isSaving(false);
                                location.reload(true);
                            },
                            statusCode: {
                                400: function (data) {
                                    if (typeof data.responseJSON.modelState !== 'undefined') {
                                        $.each(data.responseJSON.modelState, function (key, errors) {
                                            $.each(errors, function (index, error) {
                                                switch (key) {
                                                    case 'obj.FirstName':
                                                        self.product.FirstName.appendError(error);
                                                        break;
                                                    case 'obj.LastName':
                                                        self.product.LastName.appendError(error);
                                                        break;
                                                    case 'obj.EMail':
                                                        self.product.EMail.appendError(error);
                                                        break;
                                                    default:
                                                        self.generalErrors.push(error);
                                                        break;
                                                };
                                            });
                                        });
                                    }
                                    else {
                                        self.generalErrors.push(data.responseJSON.message);
                                    };
                                },
                                500: function (data) {
                                    self.generalErrors.push(data.statusText + '. Please try again.');
                                }
                            }
                        });
                    }
                    else {
                        self.errors.showAllMessages(true);
                    }

                }


                self.product = {
                    AssetID: ko.observable(data.AssetID),
                    FirstName: ko.observable(data.FirstName).extend({
                        required: true, validatable: true
                    }),
                    LastName: ko.observable(data.LastName).extend({
                        required: true, validatable: true
                    }),
                    AssetDate: ko.observable(data.AssetDate).extend({
                        required: true, validatable: true
                    }),
                    AssetNumber: ko.observable(data.AssetNumber).extend({
                        required: true, validatable: true
                    }),
                    OrgName: ko.observable(data.OrgName).extend({
                        required: true, validatable: true
                    }),
                    Position: ko.observable(data.Position).extend({
                        required: true, validatable: true
                    }),
                    EMail: ko.observable(data.EMail).extend({
                        required: true,
                        email: true, validatable: true
                    })
                }
                self.errors = ko.validation.group(self.product);

                self.generalErrors = ko.observableArray([]);

                self.validationOptions = {
                    decorateInputElement: true,
                    errorElementClass: 'error-element',
                    errorMessageClass: 'error-message'
                };
                self.isSaving = ko.observable(false);

                self.isValid = ko.computed(function () {
                    return self.errors().length == 0;
                });

                self.canSave = ko.computed(function () {
                    return self.isValid() && !self.isSaving();
                });

                //var m = ko.mapping.fromJS(data, {}, self);
                //var m2 = ko.validatedObservable(m, validationMapping);
                var m2 = self;
                return m2;
            }


        function doDelete(lnk) {
            $.ajax({
                url: location.origin + "/api/Delete?id=" + lnk.getAttribute("data-id"),
                type: "POST"
            })
            .done(function (data) {
                location.reload(true);
            });
        }

        function doAdd() {
            ko.validation.init();
            $.ajax({
                url: location.origin +"/api/Create",
                type: "GET"
            })
            .done(function (data) {
                ko.cleanNode(document.getElementById("myModal"));
                var vm = new AssetViewModel(data);
                ko.applyBindingsWithValidation(vm, document.getElementById("myModal"));

                //var propBooleanlValid = vm.errors(vm.product, { deep: false });
                //propBooleanlValid.showAllMessages(false);
                vm.errors.showAllMessages(false);
                $('#myModal').modal({
                    keyboard: true
                }, 'show');
            });
        }



        function doEdit(lnk) {
            //ko.validation.init();
            $.ajax({
                url: location.origin +"/api/Get?id=" + lnk.getAttribute("data-id"),
                type: "GET"
            })
            .done(function (data) {
                ko.cleanNode(document.getElementById("myModal"));
                var vm = new AssetViewModel(data);

                ko.applyBindings(vm, document.getElementById("myModal"));

//                var propBooleanlValid = vm.errors(vm.product, { deep: false });
//                propBooleanlValid.showAllMessages(false);
                //vm.errors = ko.validation.group(vm.product);
                vm.errors.showAllMessages(false);
                $('#myModal').modal({
                    keyboard: true
                }, 'show');
                $('#myModal').on('shown.bs.modal', function () {
                    $('#FirstName').trigger('focus')
                })
            });
        }

        $(document).ready(function () {

            var table_assets = $('#assets-data-table').DataTable(
                {
                    responsive: true,
                    serverSide: true,
                    processing: true,
                    ajax: {
                        url: location.origin +"/api/GetResults",
                        method: "POST"
                    },
                    columns: [
                        { title: "FirstName", "data": "FirstName", "searchable": true },
                        { title: "LastName", "data": "LastName", "searchable": true },
                        { title: "AssetDate", "data": "AssetDate", "searchable": true },
                        { title: "AssetNumber", "data": "AssetNumber", "searchable": true },
                        { title: "OrgName", "data": "OrgName", "searchable": true },
                        { title: "Position", "data": "Position", "searchable": true },
                        { title: "EMail", "data": "EMail", "searchable": true },
                        {
                            mRender: function (data, type, row) {
                                return '<a class="table-edit" data-id="' + row.AssetID + '" onclick="doEdit(this)">EDIT</a>'
                            }
                        },
                        {
                            mRender: function (data, type, row) {
                                return '<a class="table-del" data-id="' + row.AssetID + '" onclick="doDelete(this)">DELETE</a>'
                            }
                        }
                    ],
                    lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]]
                });
        });

    </script>
}
